# This is a basic workflow to help you get started with Actions

name: Flutter Tests


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: app-pipeline-test

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tests-android:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo content
        uses: actions/checkout@v2 # checkout the repository content to github runner.
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.0
        with:
          node-version: 14.17.3
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
      - name: Flutter action
        uses: subosito/flutter-action@v1.5.3
        with:
          flutter-version: 1.22.6
          channel: stable
      - name: Build apk
        run: |
          whereis flutter
          flutter clean
          flutter pub get
          flutter precache
          flutter build apk --debug
        continue-on-error: true
      - name: Install python dependencies
        run: |
          pip install robotframework==4.1.2
          pip install robotframework-appiumflutterlibrary==1.0.0b0
          pip install robotframework-appiumlibrary==1.6.2
          pip install robotframework-seleniumlibrary==5.1.3
          pip list
      - name: Install Node dependencies
        run: |
          npm install -g appium
          npm install -g appium-doctor
      - name: Download Android SDK
        run: |
          sudo apt update && sudo apt install android-sdk
          echo "android - $ANDROID_HOME"
          echo "java - $JAVA_HOME"
          pwd
      - name: Setup Emulator
        run: |
          cd /usr/local/lib/android/sdk/cmdline-tools/latest/bin
          ./sdkmanager "system-images;android-30;google_apis;x86"
          yes | flutter doctor --android-licenses
          cd $ANDROID_HOME/tools/bin
          ./avdmanager create avd --force -n test -k "system-images;android-30;google_apis;x86"
          cd $ANDROID_HOME/emulator
          ./emulator @test -skin 480x852
          cd $ANDROID_HOME/platform-tools/
          ./adb devices
      - name: Start Appium server
        run: |
          appium-doctor --android
          appium
      - name: Run Robot Tests
        run: robot main.robot
